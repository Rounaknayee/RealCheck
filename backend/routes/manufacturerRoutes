const express = require('express');
const jwt = require('jsonwebtoken');
require('dotenv').config();
// const {auth} = require('../middleware/auth'); // Import auth middleware and destructured auth function
const Product = require('../models/Product'); // Adjust the path as needed
const { auth, checkRole } = require('../middleware/auth');
const router = new express.Router();
const productAuthenticityContract = require('../SmartContracts/smartContractHelper');
const User = require('../models/User');


// Generate a product id
function generateproductid() {
    var timestamp = Date.now();
    var randomSuffix = Math.floor(Math.random() * 100000); // Random 4-digit number
    return `RC-${timestamp}-${randomSuffix}`;
}

/*
    Create a product
    POST /api/manufacturer/createproduct
    {
        "name": "Product 1",
        "description": "Product 1 description"
    }
*/
router.post('/createproduct', auth, checkRole('manufacturer'), async (req, res) => {
    console.log("create product")
    console.log(req);
    try {
        const product_id = generateproductid();
        const privateKey = req.user.privateKey;
        const contractInstance = new productAuthenticityContract(privateKey);
        const result = await contractInstance.addProduct(product_id, req.body.name, req.user.email);
        const product = new Product({
            name: req.body.name,
            description: req.body.description,
            manufacturer: req.user._id, 
            manufacturer_email: req.user.email,
            productId: product_id, 
            product_transaction: result['events'][0]['transactionHash'],
            manufacturer_address: req.user.walletAddress,
            current_holder: req.user.walletAddress
        });
        await product.save();   
        res.status(201).send(product);
    } catch (error) {
        console.error(error);  res.status(403).send(error);
    }
});

/*
    Get all products
    GET /api/manufacturer/productlist
*/
router.get('/productlist', auth, checkRole('manufacturer'), async (req, res) => {
    try {
      const manufacturerId = req.user._id;
      const products = await Product.find({ manufacturer: manufacturerId });
      res.status(200).send(products);
    } catch (error) {
      console.log(error);
      res.status(500).send({ error: 'Internal Server Error' });
    }
});

/*
    Get a list of suppliers
    GET /api/manufacturer/supplierlist
*/
router.get('/supplierlist', auth, checkRole('manufacturer'), async (req, res) => {
    try {
        const suppliers  = await User.find({
             role: 'supplier' 
            }).select('email walletAddress');
        console.log("suppliers fetched");
        res.status(200).send(suppliers);
    } catch (error) {
        res.status(500).send({ error: 'Error Retrieving suppliers' });
    }
});


/* 
    Tranfer a Product to a Supplier
    POST /api/manufacturer/transferproduct
    {
        "productID": "Product_id",
        "supplier_address": "Supplier Address"
    }
*/
router.post('/transferproduct', auth, checkRole('manufacturer'), async (req, res) => {
    
    try {
        console.log("Entered transfer product");
        const privateKey = req.user.privateKey;
        const supplier = await User.findOne({ email: req.body.supplier_email }).select('walletAddress');
        const contractInstance = new productAuthenticityContract(privateKey);
        const result = await contractInstance.transferProduct(req.body.product_id, supplier.walletAddress);
        const product = await Product.findOne({ 
            productId: req.body.product_id 
        });
        product.current_holder = supplier.walletAddress;
        product.product_transaction = result['events'][0]['transactionHash'];
        console.log(product);
        await product.save();
        res.status(200).send(product);
    } catch (error) {
        console.error(error);  res.status(403).send(error);
    }
});

/*
    Change the product holder
    POST /api/manufacturer/changeholder
    {
        "productID": "Product_id",
        "new_holder": "New Holder Address"
    }
*/
router.post('/changeholder', auth, checkRole('manufacturer'), async (req, res) => {
    console.log("Entered change holder");
    console.log(req.body);
    try {
        const privateKey = req.user.privateKey;
        const contractInstance = new productAuthenticityContract(privateKey);
        const result = await contractInstance.changeHolder(req.body.productID, req.body.new_holder);
        console.log("Product Transfer result");
        console.log(result);
        const product = await Product.findOne({ productId: req.body.product_id });
        product.current_holder = req.body.new_holder;
        product.product_transaction = result['events'][0]['transactionHash'];
        await product.save();
        res.status(200).send(product);
    } catch (error) {
        console.error(error);  res.status(403).send(error);
    }
});

  

module.exports = router;
